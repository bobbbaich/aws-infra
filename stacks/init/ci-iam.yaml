AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys CI user that must be used for CI/CD pipelines.
  First deployment is manual by admin user thru AWS CloudFormation console

Parameters:
  EnvironmentName:
    Type: String

Resources:
  CIUser:
    Type: AWS::IAM::User
    Properties:
      UserName: ci-user

  CIUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CIUser
      Serial: 1

  BasicPermissionsCIGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ci-group-basic-permissions
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRoute53FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/CloudFrontFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/SecretsManagerReadWrite'

  ApplicationPermissionCIGroups:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ci-group-application
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonECS_FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonESCognitoAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - 'arn:aws:iam::aws:policy/AWSAppMeshFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudMapFullAccess'

  BasicPermissionsCIGroupMembership:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref BasicPermissionsCIGroup
      Users:
        - !Ref CIUser

  ApplicationPermissionCIGroupsMembership:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref ApplicationPermissionCIGroups
      Users:
        - !Ref CIUser

  CognitoUserPoolFullAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Cognito user pool full access custom policy"
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:*"
                "cognito-identity:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "cognito-idp:*",
              "Resource": [
                "arn:aws:wafv2:*:*:*/webacl/*/*",
                "arn:aws:cognito-idp:*:*:userpool/*"
              ]
            }
          ]
        }
      Groups:
        - !Ref ApplicationPermissionCIGroups

  LambdaCustomPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Lambda custom policy"
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:CreateFunction",
                "lambda:TagResource",
                "lambda:DeleteProvisionedConcurrencyConfig",
                "lambda:GetFunctionConfiguration",
                "lambda:EnableReplication",
                "lambda:ListProvisionedConcurrencyConfigs",
                "lambda:DisableReplication",
                "lambda:GetProvisionedConcurrencyConfig",
                "lambda:ListLayers",
                "lambda:ListLayerVersions",
                "lambda:DeleteFunction",
                "lambda:GetAlias",
                "lambda:ListCodeSigningConfigs",
                "lambda:UpdateFunctionUrlConfig",
                "lambda:CreateFunctionUrlConfig",
                "lambda:UpdateFunctionEventInvokeConfig",
                "lambda:DeleteFunctionCodeSigningConfig",
                "lambda:InvokeFunctionUrl",
                "lambda:ListFunctions",
                "lambda:GetEventSourceMapping",
                "lambda:InvokeFunction",
                "lambda:ListAliases",
                "lambda:GetFunctionUrlConfig",
                "lambda:AddLayerVersionPermission",
                "lambda:GetFunctionCodeSigningConfig",
                "lambda:UpdateAlias",
                "lambda:UpdateFunctionCode",
                "lambda:ListFunctionEventInvokeConfigs",
                "lambda:ListFunctionsByCodeSigningConfig",
                "lambda:GetFunctionConcurrency",
                "lambda:PutProvisionedConcurrencyConfig",
                "lambda:ListEventSourceMappings",
                "lambda:PublishVersion",
                "lambda:DeleteEventSourceMapping",
                "lambda:CreateAlias",
                "lambda:ListVersionsByFunction",
                "lambda:GetLayerVersion",
                "lambda:PublishLayerVersion",
                "lambda:InvokeAsync",
                "lambda:GetAccountSettings",
                "lambda:CreateEventSourceMapping",
                "lambda:GetLayerVersionPolicy",
                "lambda:UntagResource",
                "lambda:RemoveLayerVersionPermission",
                "lambda:PutFunctionConcurrency",
                "lambda:DeleteCodeSigningConfig",
                "lambda:ListTags",
                "lambda:DeleteLayerVersion",
                "lambda:PutFunctionEventInvokeConfig",
                "lambda:DeleteFunctionEventInvokeConfig",
                "lambda:CreateCodeSigningConfig",
                "lambda:PutFunctionCodeSigningConfig",
                "lambda:UpdateEventSourceMapping",
                "lambda:UpdateFunctionCodeSigningConfig",
                "lambda:GetFunction",
                "lambda:UpdateFunctionConfiguration",
                "lambda:ListFunctionUrlConfigs",
                "lambda:UpdateCodeSigningConfig",
                "lambda:AddPermission",
                "lambda:GetFunctionEventInvokeConfig",
                "lambda:DeleteAlias",
                "lambda:DeleteFunctionConcurrency",
                "lambda:GetCodeSigningConfig",
                "lambda:DeleteFunctionUrlConfig",
                "lambda:RemovePermission",
                "lambda:GetPolicy"
              ],
              "Resource": "*"
            }
          ]
        }
      Groups:
        - !Ref ApplicationPermissionCIGroups

Outputs:
  CIUserAccessKeyId:
    Description: CI User access key
    Value: !Ref CIUserAccessKey
    Export:
      Name: !Sub ${EnvironmentName}:CIUserAccessKeyId

  CIUserAccessKeySecretAccessKey:
    Description: CI User secret key
    Value: !GetAtt CIUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub ${EnvironmentName}:CIUserAccessKeySecretAccessKey