AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates the infrastructure to host and expose a Single Page Application:
      - An Amazon S3 bucket for hosting the application
      - An Amazon CloudFront distribution to expose the application
      - An Amazon S3 bucket for hosting bucket and cloudfront access logs
      - A public API to be used by the application to demonstrate CORS configuration

Parameters:
  EnvironmentName:
    Type: String
  AppDomainName:
    Type: String
  ALBDNSName:
    Type: String

Resources:

  # The Amazon CloudFront distribution exposing our Single Page Application
  # For demo purposes and to reduce cost, no WAF is configured
  CFDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - CFOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub ${EnvironmentName}.${AppDomainName}
        Origins:
          - Id: clientAppS3Origin
            DomainName: !ImportValue
              'Fn::Sub': '${EnvironmentName}:ClientAppS3BucketRegionalDomainName'
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CFOriginAccessIdentity}
          - Id: loadBalancerOrigin
            DomainName: !Ref ALBDNSName
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
              OriginSSLProtocols:
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: X-App-CDN-Only
                HeaderValue: random-value-1234567890
        Enabled: true
        IPV6Enabled: true
        DefaultRootObject: index.html
        CacheBehaviors:
          - TargetOriginId: loadBalancerOrigin
            PathPattern: /api/*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
        DefaultCacheBehavior:
          TargetOriginId: clientAppS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
        PriceClass: PriceClass_100
        ViewerCertificate:
          # TODO: replace by AWS::CertificateManager::Certificate
          AcmCertificateArn: arn:aws:acm:us-east-1:194858711721:certificate/916f10f8-25c0-4b81-84dd-3eed94d199f4
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Logging:
          Bucket: !ImportValue
            'Fn::Sub': '${EnvironmentName}:ClientAppLogsS3BucketRegionalDomainName'
          Prefix: 'cloudfront-access-logs'

  # The Amazon CloudFront origin access identity
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${EnvironmentName}-client-app-origin-access-identity

  # The Amazon S3 bucket policy for securing the bucket hosting the application
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: ClientAppS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject*'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !ImportValue
                  'Fn::Sub': '${EnvironmentName}:ClientAppS3Bucket'
                - /*
      Bucket: !ImportValue
        'Fn::Sub': '${EnvironmentName}:ClientAppS3Bucket'