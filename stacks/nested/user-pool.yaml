AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: This template deploys AWS Cognito user pool
# https://georgemao.medium.com/amazon-cognito-automation-with-cloudformation-is-kind-of-tricky-heres-a-quick-example-65bdc61d39f7

Parameters:
  EnvironmentName:
    Type: String
  AppDomainName:
    Type: String

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${EnvironmentName}.${AppDomainName}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - !Sub https://${EnvironmentName}.${AppDomainName}
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub
        - 'auth-${Environment}-${Domain}'
        - Domain: !Select [ 0, !Split [ ".", !Ref AppDomainName ] ]
          Environment: !Ref EnvironmentName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'ops-lambaRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ops-lambdaPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
              - Effect: Allow
                Action:
                  - 'cognito-idp:*'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              - Effect: Allow
                Action:
                  - 'es:*'
                Resource:
                  - '*'
                  -

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'ops-cognitoAuthRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'ops-lambdaExecution'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource:
                  - '*'

  UnAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'ops-cognitoUnauthRole'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated

      Policies:
        - PolicyName: 'ops-UnauthPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource:
                  - '*'

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: 'ops-identity-pool'
      AllowUnauthenticatedIdentities: 'true'

  IdentityPoolRoleAttachment:
    DependsOn: AuthenticatedRole
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        "authenticated": !GetAtt AuthenticatedRole.Arn
        "unauthenticated": !GetAtt UnAuthenticatedRole.Arn

  WiringFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
      - UserPool
      - IdentityPool
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          STACK_PREFIX: 'ops'
          USER_POOL_ID: !Ref UserPool
      Code:
        ZipFile: !Join
          - ''
          - - |
              from __future__ import print_function
            - |+

            - |
              import json
            - |
              import os
            - |
              import random
            - |
              import uuid
            - |+

            - |
              import boto3
            - |
              from botocore.vendored import requests
            - |+

            - |
              def handler(event, context):
            - |2
                  if event['RequestType'] == 'Create':
            - |2
                      try:
            - |2
                          create_cognito_user()
            - |2
                      except Exception as e:
            - |2
                          send_response(event, context, 'FAILED')
            - |2
                          return False
            - |2
                  send_response(event, context, 'SUCCESS')
            - |2
                  return True
            - |+

            - |
              def create_cognito_user():
            - |2
                  cognito_idp = boto3.client('cognito-idp')
            - |2
                  try:
            - |2
                      response = cognito_idp.admin_create_user(
            - |2
                          UserPoolId=os.environ['USER_POOL_ID'],
            - |2
                          Username='opensearchdashboard',
            - |2
                          TemporaryPassword='Abcde1234!'
            - |2
                      )
            - |2
                  except Exception as e:
            - |2
                      print('Exception creating Cognito user.\nMessage: {}'.format(e.message))
            - |+

            - |
              def send_response(event, context, status_code):
            - |2
                  response_body = {'Status': status_code,
            - |2
                                   'Reason': 'See CloudWatch Log Stream: ' + context.log_stream_name,
            - |2
                                   'PhysicalResourceId': context.log_stream_name,
            - |2
                                   'StackId': event['StackId'],
            - |2
                                   'RequestId': event['RequestId'],
            - |2
                                   'LogicalResourceId': event['LogicalResourceId'],
            - |2
                                   'Data': {'Data': 'No data'}}
            - |2
                  json_response_body = json.dumps(response_body)
            - |2
                  print('Response: {}'.format(json_response_body))
            - |2
                  headers = {
            - |2
                      'content-type' : '',
            - |2
                      'content-length' : str(len(json_response_body))
            - |2
                  }
            - |2
                  try:
            - |2
                      req = requests.put(event['ResponseURL'],
            - |2
                                         data=json_response_body,
            - |2
                                         headers=headers)
            - |2
                      if req.status_code != 200:
            - |2
                          print('Received non 200 response while sending to CFN\nText: {}'.format(req.text))
            - |2
                          raise Exception('Recieved non 200 response while sending response to CFN.')
            - |2
                      print('Successfully sent response to CFN\n{}'.format(req.text))
            - |2
                      return
            - |2
                  except requests.exceptions.RequestException as e:
            - |2
                      print(e)
            - |2
                      raise
            - |+

  WiringFunctionInvocation:
    Type: 'Custom::WiringFunctionInvocation'
    DependsOn: WiringFunction
    Properties:
      ServiceToken: !GetAtt WiringFunction.Arn
      Region: !Ref 'AWS::Region'

Outputs:
  CognitoApplicationDomainName:
    Value: !Ref UserPoolDomain
    Description: The pool application domain name
    Export:
      Name: !Sub ${EnvironmentName}:CognitoApplicationDomainName
  CognitoUserPoolId:
    Value: !Ref UserPool
    Description: The user pool ID
    Export:
      Name: !Sub ${EnvironmentName}:CognitoUserPoolId
  CognitoClientId:
    Value: !Ref UserPoolClient
    Description: The app client ID
    Export:
      Name: !Sub ${EnvironmentName}:CognitoClientId
  CognitoIdentityPool:
    Description: This is the cognito identity pool.
    Value: !Ref IdentityPool
  CognitoAuthRoleArn:
    Description: ARN of the Authentication Role for Cognito Users
    Value: !GetAtt AuthenticatedRole.Arn
  CognitoUser:
    Description: This is the cognito user.
    Value: opensearchdashboard
  CognitoPassword:
    Description: This is the cognito temporary password.
    Value: 'Abcde1234!'
