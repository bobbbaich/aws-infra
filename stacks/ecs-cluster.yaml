AWSTemplateFormatVersion: '2010-09-09'
Description: External, public facing load balancer, for forwarding public traffic to containers

Parameters:
  EnvironmentName:
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  LoadBalancerPublicSubnetIds:
    Type: CommaDelimitedList
  DBSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  DBPort:
    Type: Number

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-poc-cluster

  ContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: container-sg
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ServiceToDatabaseIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: TCP
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !Ref ContainerSG
      GroupId: !Ref DBSecurityGroupId

  ServiceToServiceIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: TCP
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !Ref ContainerSG
      GroupId: !Ref ContainerSG

  ServiceToDatabaseEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: TCP
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      DestinationSecurityGroupId: !Ref DBSecurityGroupId
      GroupId: !Ref ContainerSG

  LoadBalancerToServiceIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: TCP
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !GetAtt PublicLoadBalancerSG.GroupId
      GroupId: !GetAtt ContainerSG.GroupId

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: public-load-balancer-sg
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref LoadBalancerPublicSubnetIds
      SecurityGroups: [ !Ref PublicLoadBalancerSG ]

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
            Protocol: "#{protocol}"
            Port: "#{port}"
            Host: "#{host}"
            Path: "/default/"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub http://${PublicLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}:BaseUrl
  ECSCluster:
    Description: The ECS Cluster ID
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${EnvironmentName}:ECSCluster
  ContainerSG:
    Description: The Container Security Group ID
    Value: !Ref ContainerSG
    Export:
      Name: !Sub ${EnvironmentName}:ContainerSG
  PublicLoadBalancerListener:
    Description: The Container Security Group ID
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Sub ${EnvironmentName}:PublicLoadBalancerListener